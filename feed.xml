<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Douglas Duhaime</title>
    <description>Working notes on data mining and early book history.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Dec 2015 15:48:40 -0500</pubDate>
    <lastBuildDate>Wed, 16 Dec 2015 15:48:40 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Clustering Semantic Vectors with Python</title>
        <description>&lt;p&gt;Google’s Word2Vec and Stanford’s GloVe have recently offered two fantastic open source software packages capable of transposing words into a high dimension vector space. In both cases, a vector’s position within the high dimensional space gives a good indication of the word’s semantic class (among other things), and in both cases these vector positions can be used in a variety of applications. In the post below, I’ll discuss one approach you can take to clustering the vectors into coherent semantic groupings.&lt;/p&gt;

&lt;p&gt;Both Word2Vec and GloVe can create vector spaces given a large training corpus, but both maintain pretrained vectors as well. To get started with ~1GB of pretrained vectors from GloVe, one need only run the following lines:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;wget http://www-nlp.stanford.edu/data/glove.6B.300d.txt.gz
gunzip glove.6B.300d.txt.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you unzip and then glance at glove.6B.300d.txt, you’ll see that it’s organized as follows:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;the 0.04656 0.21318 -0.0074364 [...] 0.053913
, -0.25539 -0.25723 0.13169 [...] 0.35499
. -0.12559 0.01363 0.10306 [...] 0.13684
of -0.076947 -0.021211 0.21271 [...] -0.046533
to -0.25756 -0.057132 -0.6719 [...] -0.070621
[...]
sandberger 0.429191 -0.296897 0.15011 [...] -0.0590532&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each new line contains a token followed by 300 signed floats, and those values appear to be organized from most to least common. Given this ready format, it’s fairly straightforward to get straight to clustering!&lt;/p&gt;

&lt;p&gt;There are a variety of methods for clustering vectors, including density-based clustering, hierarchical clustering, and centroid clustering. One of the most intuitive and most commonly used centroid-based methods is K-Means. Given a collection of points in a space, K-Means uses a Hunger Games style random lottery to pick a few lucky points (colored green below), then assigns each of the non-lucky points to the lucky point to which it’s closest. Using these preliminary groupings, the next step is to find the “centroid” (or geometric center) of each group, using the same technique one would use to find the center of a square. These centroids become the new lucky points, and again each non-lucky point is again assigned to the lucky point to which it’s closest. This process continues until the centroids settle down and stop moving, after which the clustering is complete. Here’s a nice visual description of K-Means &lt;a href=&quot;http://shabal.in/visuals.html&quot;&gt;[source]&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_images/clustering_semantic_vectors/kmeans.gif&quot; id=&quot;gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To cluster the GloVe vectors in a similar fashion, one can use the sklearn package in Python, along with a few other packages:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;from __future__ import division
from sklearn.cluster import KMeans 
from numbers import Number
from pandas import DataFrame
import sys, codecs, numpy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will also be helpful to build a class to mimic the behavior of autovivification in Perl, which is essentially the process of creating new default hash values given a new key. In Python, this behavior is available through collections.defaultdict(), but the latter isn’t serializable, so the following class is handy. Given an input key it hasn’t seen, the class will create an empty list as the corresponding hash value:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;class autovivify_list(dict):
    &amp;#39;&amp;#39;&amp;#39;A pickleable version of collections.defaultdict&amp;#39;&amp;#39;&amp;#39;
    def __missing__(self, key):
        &amp;#39;&amp;#39;&amp;#39;Given a missing key, set initial value to an empty list&amp;#39;&amp;#39;&amp;#39;
        value = self[key] = []
        return value

    def __add__(self, x):
        &amp;#39;&amp;#39;&amp;#39;Override addition for numeric types when self is empty&amp;#39;&amp;#39;&amp;#39;
        if not self and isinstance(x, Number):
            return x
        raise ValueError

    def __sub__(self, x):
        &amp;#39;&amp;#39;&amp;#39;Also provide subtraction method&amp;#39;&amp;#39;&amp;#39;
        if not self and isinstance(x, Number):
            return -1 * x
        raise ValueError&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We also want a method to read in a vector file (e.g. glove.6B.300d.txt) and store each word and the position of that word within the vector space. Because reading in and analyzing some of the larger GloVe files can take a long time, to get going quickly one can limit the number of lines to read from the input file by specifying a global value (n_words), which is defined later on:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;def build_word_vector_matrix(vector_file, n_words):
    &amp;#39;&amp;#39;&amp;#39;Return the vectors and labels for the first n_words in vector file&amp;#39;&amp;#39;&amp;#39;
    numpy_arrays = []
    labels_array = []
    with codecs.open(vector_file, &amp;#39;r&amp;#39;, &amp;#39;utf-8&amp;#39;) as f:
        for c, r in enumerate(f):
            sr = r.split()
            labels_array.append(sr[0])
            numpy_arrays.append( numpy.array([float(i) for i in sr[1:]]) )

            if c == n_words:
                return numpy.array( numpy_arrays ), labels_array

    return numpy.array( numpy_arrays ), labels_array&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Scikit-Learn’s implementation of K-Means returns an object (cluster_labels in these snippets) that indicates the cluster to which each input vector belongs. That object doesn’t tell one which word belongs in each cluster, however, so the following method takes care of this. Because all of the words being analyzed are stored in labels_array and the cluster to which each word belongs is stored in cluster_labels, the following method can easily map those two sequences together:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;def find_word_clusters(labels_array, cluster_labels):
    &amp;#39;&amp;#39;&amp;#39;Return the set of words in each cluster&amp;#39;&amp;#39;&amp;#39;
    cluster_to_words = autovivify_list()
    for c, i in enumerate(cluster_labels):
        cluster_to_words[ i ].append( labels_array[c] )
    return cluster_to_words&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we can call the methods above, perform K-Means clustering, and print the contents of each cluster with the following block:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    input_vector_file = sys.argv[1] # Vector file input (e.g. glove.6B.300d.txt)
    n_words           = int(sys.argv[2]) # Number of words to analyze 
    reduction_factor  = float(sys.argv[3]) # Amount of dimension reduction {0,1}
    clusters_to_make  = int( n_words * reduction_factor ) # Number of clusters to make
    df, labels_array  = build_word_vector_matrix(input_vector_file, n_words)
    kmeans_model      = KMeans(init=&amp;#39;k-means++&amp;#39;, n_clusters=clusters_to_make, n_init=10)
    kmeans_model.fit(df)

    cluster_labels    = kmeans_model.labels_
    cluster_inertia   = kmeans_model.inertia_
    cluster_to_words  = find_word_clusters(labels_array, cluster_labels)

    for c in cluster_to_words:
        print cluster_to_words[c]
        print &amp;quot;\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The full script is available &lt;a href=&quot;https://gist.github.com/duhaime/9330473f9a4e288f00af&quot;&gt;here&lt;/a&gt;. To run it, one needs to specify the vector file to be read in, the number of words one wishes to sample from that file (one can of course read them all, but doing so can take some time), and the “reduction factor”, which determines the number of clusters to be made. If one specifies a reduction factor of .1, for instance, the routine will produce n*.1 clusters, where n is the number of words sampled from the file. The following command reads in the first 10,000 words, and produces 1,000 clusters:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;python cluster_vectors.py glove.6B.300d.txt 10000 .1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output of this command is the series of clusters produced by the K-Means clustering:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;[u&amp;#39;Chicago&amp;#39;, u&amp;#39;Boston&amp;#39;, u&amp;#39;Houston&amp;#39;, u&amp;#39;Atlanta&amp;#39;, u&amp;#39;Dallas&amp;#39;, u&amp;#39;Denver&amp;#39;, u&amp;#39;Philadelphia&amp;#39;, u&amp;#39;Baltimore&amp;#39;, u&amp;#39;Cleveland&amp;#39;, u&amp;#39;Pittsburgh&amp;#39;, u&amp;#39;Buffalo&amp;#39;, u&amp;#39;Cincinnati&amp;#39;, u&amp;#39;Louisville&amp;#39;, u&amp;#39;Milwaukee&amp;#39;, u&amp;#39;Memphis&amp;#39;, u&amp;#39;Indianapolis&amp;#39;, u&amp;#39;Auburn&amp;#39;, u&amp;#39;Dame&amp;#39;]

[u&amp;#39;Product&amp;#39;, u&amp;#39;Products&amp;#39;, u&amp;#39;Shipping&amp;#39;, u&amp;#39;Brand&amp;#39;, u&amp;#39;Customer&amp;#39;, u&amp;#39;Items&amp;#39;, u&amp;#39;Retail&amp;#39;, u&amp;#39;Manufacturer&amp;#39;, u&amp;#39;Supply&amp;#39;, u&amp;#39;Cart&amp;#39;, u&amp;#39;SKU&amp;#39;, u&amp;#39;Hardware&amp;#39;, u&amp;#39;OEM&amp;#39;, u&amp;#39;Warranty&amp;#39;, u&amp;#39;Brands&amp;#39;]

[u&amp;#39;home&amp;#39;, u&amp;#39;house&amp;#39;, u&amp;#39;homes&amp;#39;, u&amp;#39;houses&amp;#39;, u&amp;#39;housing&amp;#39;, u&amp;#39;offices&amp;#39;, u&amp;#39;household&amp;#39;, u&amp;#39;acres&amp;#39;, u&amp;#39;residence&amp;#39;]

[...]

[u&amp;#39;Night&amp;#39;, u&amp;#39;Disney&amp;#39;, u&amp;#39;Magic&amp;#39;, u&amp;#39;Dream&amp;#39;, u&amp;#39;Ultimate&amp;#39;, u&amp;#39;Fantasy&amp;#39;, u&amp;#39;Theme&amp;#39;, u&amp;#39;Adventure&amp;#39;, u&amp;#39;Cruise&amp;#39;, u&amp;#39;Potter&amp;#39;, u&amp;#39;Angels&amp;#39;, u&amp;#39;Adventures&amp;#39;, u&amp;#39;Dreams&amp;#39;, u&amp;#39;Wonder&amp;#39;, u&amp;#39;Romance&amp;#39;, u&amp;#39;Mystery&amp;#39;, u&amp;#39;Quest&amp;#39;, u&amp;#39;Sonic&amp;#39;, u&amp;#39;Nights&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m currently using these word clusters for fuzzy plagiarism detection, but they can serve a wide variety of purposes. If you find them helpful for a project you’re working on, feel free to drop me a note below!&lt;/p&gt;

</description>
        <pubDate>Sat, 12 Sep 2015 11:24:24 -0400</pubDate>
        <link>http://yourdomain.com/posts/clustering-semantic-vectors</link>
        <guid isPermaLink="true">http://yourdomain.com/posts/clustering-semantic-vectors</guid>
        
        
        <category>word-embeddings</category>
        
        <category>clustering</category>
        
      </item>
    
      <item>
        <title>Crosslingual Plagiarism Detection with Scikit-Learn</title>
        <description>&lt;p&gt;Oliver Goldsmith, one of the great poets, playwrights, and historians of science from the Enlightenment, was many things. He was “an idle, orchard-robbing schoolboy; a tuneful but intractable sizar of Trinity; a lounging, loitering, fair-haunting, flute-playing Irish ‘buckeen.’” He was also a brilliant plagiarist. Goldsmith frequently borrowed whole sentences and paragraphs from French &lt;i&gt;philosophes&lt;/i&gt; such as Voltaire and Diderot, closely translating their works into his own voluminous books without offering so much as a word that the passages were taken from elsewhere. Over the last several months, I have worked with several others to study the ways Goldsmith adapted and freely translated these source texts into his own writing in order to develop methods that can be used to discover crosslingual text reuse. By outlining below some of the methods that I have found useful within this field of research, the following post attempts to show how automated methods can be used to further advance our understanding of the history of authorship.&lt;/p&gt;

&lt;h4&gt;Sample Training Data&lt;/h4&gt;

&lt;p&gt;In order to identify the passages within Goldsmith’s corpus that were taken from other writers, I decided to train a machine learning algorithm to differentiate between plagiarisms and non-plagiarisms. To distinguish between these classes of writing, John Dillon and I collected a large number of plagiarized and non-plagiarized passages within Goldsmith’s writing, and provided annotations to identify whether the target passage had been plagiarized or not. Here are a few sample rows from the training data:&lt;/p&gt;

&lt;div id=&quot;goldsmith-training-table&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;&lt;th&gt;French Source&lt;/th&gt;&lt;th&gt;Goldsmith Text&lt;/th&gt;&lt;th&gt;Plagiarism&lt;/th&gt;&lt;/tr&gt;

    &lt;tr&gt;&lt;td&gt;Bothwell eut toute l&#39;insolence qui suit les grands crimes. Il assembla les principaux seigneurs, et leur fit signer un écrit, par lequel il était dit expressément que la reine ne se pouvait dispenser de l&#39;éspouser, puisqu&#39;il l&#39;avait enlevée, et qu&#39;il avait couché avec elle.&lt;/td&gt;&lt;td&gt;Bothwell was possessed of all the insolence which attends great crimes: he assembled the principal Lords of the state, and compelled them to sign an instrument, purporting, that they judged it the Queen&#39;s interest to marry Bothwell, as he had lain with her against her will.&lt;/td&gt;&lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
  
    &lt;tr&gt;&lt;td&gt;Histoire c&#39;est le récit des faits donnés pour vrais; au contraire de la fable, qui est le récit des faits donnés pour faux.&lt;/td&gt;&lt;td&gt;In the early part of history a want of real facts hath induced many to spin out the little that was known with conjecture.&lt;/td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;&lt;/tr&gt;

    &lt;tr&gt;&lt;td&gt;La meilleure maniere de connoître l&#39;usage qu&#39;on doit faire de l&#39; esprit, est de lire le petit nombre de bons ouvravrages de génie qu&#39;on a dans les langues savantes &amp;amp; dans la nôtre.&lt;/td&gt;&lt;td&gt;The best method of knowing the true use to be made of wit is, by reading the small number of good works, both in the learned languages, and in our own.&lt;/td&gt;&lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;  
    &lt;tr&gt;&lt;td&gt;Comme il y a en Peinture différentes écoles, il y en a aussi en Sculpture, en Architecture, en Musique, &amp;amp; en général dans tous les beaux Arts.&lt;/td&gt;&lt;td&gt;A school in the polite arts, properly signifies, that succession of artists which has learned the principles of the art from some eminent master, either by hearing his lessons, or studying his works.&lt;/td&gt;&lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;&lt;/tr&gt;  
  
    &lt;tr&gt;&lt;td&gt;Des étoiles qui tombent, des montagnes qui se fendent, des fleuves qui reculent, le Soleil &amp;amp; la Lune qui se dissolvent, des comparaisons fausses &amp;amp; gigantesques, la nature toûjours outrée, sont le caractere de ces écrivains, parce que dans ces pays où l&#39;on n&#39;a jamais parlé en public.&lt;/td&gt;&lt;td&gt;Falling stars, splitting mountains, rivers flowing to their sources, the sun and moon dissolving, false and unnatural comparisons, and nature everywhere exaggerated, form the character of these writers; and this arises from their never, in these countries, being permitted to speak in public.&lt;/td&gt;&lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;

  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Given this training data, the goal was to identify some features that commonly appear in Goldsmith’s plagiarized passages but don’t commonly appear in his non-plagiarized passages. If we could derive a set of features that differentiate between these two classes, we would be ready to search through Goldsmith’s corpus and tease out only those passages that had been borrowed from elsewhere.&lt;/p&gt;

&lt;h4&gt;FEATURE SELECTION: ALZAHRANI SIMILARITY&lt;/h4&gt;

&lt;p&gt;Because a plagiarized passage can be expected to have language that is similar but not necessarily identical to the language used within the plagiarized source text, I decided to test some fuzzy string similarity measures. One of the more promising leads on this front was adapted from the work of Salha M. Alzahrani et al. [2012], who has produced a number of great papers on plagiarism detection. The specific similarity measure adapted from Alzahrani calculates the similarity between two passages (call them Passage A and Passage B) in the following way:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;def alzahrani_similarity( a_passage, b_passage ):

    # Create a similarity counter and set its value to zero
    similarity = 0

    # For each word in Passage A
    for a_word in a_passage:

        # If that word is in Passage B
        if a_word in b_passage:

            # Add one to the similarity counter
            similarity += 1

        # Otherwise,
        else:

            # For each word in Passage B
            for b_word in b_passage:    

                # If the current word from Passage A is a synonym of the current word from Passage B,
                if a_word in find_synonyms( b_word ):

                    # Add one half to the similarity counter
                    similarity += .5
                    break

    # Finally, divide the similarity score by the number of words in the longer passage
    return similarity / max( len(a_passage), len(b_passage) )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To prepare the data for this algorithm, I used the &lt;a href=&quot;http://pythonhosted.org/goslate/&quot;&gt;Google Translate API&lt;/a&gt; to translate French texts into English, the &lt;a href=&quot;https://words.bighugelabs.com/api.php&quot;&gt;Big Huge Labs Thesaurus API&lt;/a&gt; to collect synonyms for each word in Passage B, and the &lt;a href=&quot;http://www.nltk.org/&quot;&gt;NLTK&lt;/a&gt; to clean the resulting texts (dropping stop words, removing punctuation, etc.). Once these resources were prepared, I used an implementation of the algorithm described above to calculate the “similarity” between the paired passages in the training data. As one can see, the similarity value returned by this algorithm discriminates reasonably well between plagiarized and non-plagiarized passages:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;centered&quot; src=&quot;/images/post_images/crosslingual_plagiarism_detection/alzahrani_aggregate.png&quot; alt=&quot;Alzahrani Similarity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The y-axis here is discrete–each data point represents either a plagiarized pair of passages (such as those in the training data discussed above), or a non-plagiarized pair of passages. The x-axis is really the important axis. The further to the right a point falls on this axis, the greater the length-normalized similarity score for the passage pair. As one would expect, plagiarized passages have much higher similarity scores than non-plagiarized passages.&lt;/p&gt;

&lt;p&gt;In order to investigate how sensitive this similarity method is to passage length, I iterated over all sub-windows of &lt;i&gt;n&lt;/i&gt; words within the training data, and used the same similarity method to calculate the similarity of the sub-window within the text. When &lt;i&gt;n&lt;/i&gt; is five, for instance, one would compare the first five words of Passage A to the first five from Passage B. After storing that value, one would compare words two through six from Passage A to words one through five of Passage B, then words three through seven from Passage A to words one through five of Passage B, proceeding in this way until all five-word windows had been compared. Once all of these five-word scores are calculated, only the maximum score is retained, and the rest are discarded. The following plot shows that as the number of words in the sub-window increases, the separation between plagiarized and non-plagiarized passages also increases:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;centered&quot; src=&quot;/images/post_images/crosslingual_plagiarism_detection/alzahrani_subwindows.png&quot; alt=&quot;Alzahrani Similarity Subwindows&quot; style=&quot;width:100%; height:100%&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;FEATURE SELECTION: WORD2VEC SIMILARITY&lt;/h4&gt;
&lt;p&gt;Although the method discussed above provides helpful separation between plagiarized and non-plagiarized passages, it reduces word pairs to one of three states: equivalent, synonymous, and irrelevant. Intuitively, this model feels limited, because one senses that words can have &lt;i&gt;degrees&lt;/i&gt; of similarity. Consider the words &lt;i&gt;small&lt;/i&gt;, &lt;i&gt;tiny&lt;/i&gt;, and &lt;i&gt;humble&lt;/i&gt;. The thesaurus discussed above identifies these terms as synonyms, and the algorithm described above essentially treats the words as interchangeable synonyms. This is slightly unsatisfying because the word &lt;i&gt;small&lt;/i&gt; seems more similar to the word &lt;i&gt;tiny&lt;/i&gt; than the word &lt;i&gt;humble&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;To capture some of these finer gradations in meaning, I called on &lt;a href=&quot;https://code.google.com/p/word2vec/&quot;&gt;Word2Vec&lt;/a&gt;, a method that uses backpropagation to represent words in high-dimensional vector spaces. Once a word has been transposed into this vector space, one can compare a word’s vector to another word’s vector and obtain a measure of the similarity of those words. The following snippet, for instance, uses a cosine distance metric to measure the degree to which tiny and humble are similar to the word small:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;from gensim.models.word2vec import Word2Vec
from sklearn.metrics.pairwise import cosine_similarity        

# Load the Google pretrained word vectors
model = Word2Vec.load_word2vec_format(&amp;#39;../google_pretrained_word_vectors/GoogleNews-vectors-negative300.bin.gz&amp;#39;, binary=True)

# Obtain the vector representations of three words
v1 = model[ &amp;quot;small&amp;quot; ]
v2 = model[ &amp;quot;tiny&amp;quot; ]
v3 = model[ &amp;quot;humble&amp;quot; ]

# Measure the similarity of &amp;quot;tiny&amp;quot; and &amp;quot;humble&amp;quot; to the word &amp;quot;small&amp;quot;
for v in [v2,v3]:
    print cosine_similarity(v1, v)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running this script returns [[ 0.71879274]] and [[ 0.29307675]] respectively, which is to say Word2Vec can recognize that the word &lt;i&gt;small&lt;/i&gt; is more similar to &lt;i&gt;tiny&lt;/i&gt; than it is to &lt;i&gt;humble&lt;/i&gt;. Because Word2Vec allows one to calculate these fine gradations of word similarity, it does a great job calculating the similarity of passages from the Goldsmith training data. The following plot shows the separation achieved by running a modified version of the “Alzahrani algorithm” described above, using this time Word2Vec to measure word similarity:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;centered&quot; src=&quot;/images/post_images/crosslingual_plagiarism_detection/word2vec_aggregate.png&quot; alt=&quot;Word2Vec Similarity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As one can see, the Word2Vec similarity measure achieves very promising separation between plagiarized and non-plagiarized passage pairs. By repeating the subwindow method described above, one can identify the critical value wherein separation between plagiarized and non-plagiarized passages is best achieved with a Word2Vec similarity metric:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;centered&quot; src=&quot;/images/post_images/crosslingual_plagiarism_detection/word2vec_subwindows.png&quot; alt=&quot;Word2Vec Subwindow Similarity&quot; style=&quot;width:100%; height:100%&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;FEATURE SELECTION: SYNTACTIC SIMILARITY&lt;/h4&gt;

&lt;p&gt;Much like the semantic features discussed above, syntactic similarity can also serve as a clue of plagiarism. While a thoroughgoing pursuit of syntactic features might lead one deep into sophisticated analysis of dependency trees, it turns out one can get reasonable results by simply examining the distribution of part of speech tags within Goldsmith’s plagiarisms and their source texts. Using the Stanford Part of Speech (POS) Tagger’s French and English models, and a custom mapping I put together to link the French POS tags to the universal tagset, I transformed each of the paired passages in the training data into a POS sequence such as the following:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&quot;&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;[(u&amp;#39;Newton&amp;#39;, u&amp;#39;NNP&amp;#39;), (u&amp;#39;appeared&amp;#39;, u&amp;#39;VBD&amp;#39;),...,(u&amp;#39;amazing&amp;#39;, u&amp;#39;JJ&amp;#39;), (u&amp;#39;.&amp;#39;, u&amp;#39;.&amp;#39;)]
[(u&amp;#39;Newton&amp;#39;, u&amp;#39;NPP&amp;#39;), (u&amp;#39;parut&amp;#39;, u&amp;#39;V&amp;#39;),...,(u&amp;#39;nouvelle:&amp;#39;, u&amp;#39;CL&amp;#39;),(u&amp;#39;.&amp;#39;, u&amp;#39;.&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using these sequences, two similarity metrics were used to measure the similarity between each of the paired passages in the training data. The first measure (on the x-axis below) simply measured the cosine distance between the two POS sequences; the second measure (on the y-axis below) calculated the longest common POS substring between the two passages. As one would expect, plagiarized passages tend to have higher values in both categories:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;centered&quot; src=&quot;/images/post_images/crosslingual_plagiarism_detection/syntax.png&quot; alt=&quot;Syntactic Similarity&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;CLASSIFIER RESULTS&lt;/h4&gt;
&lt;p&gt;From the similarity metrics discussed above, I selected a bare-bones set of six features that could be fed to a plagiarism classifier: (1) the aggregate “Alzahrani similarity” score, (2) the maximum six-gram Alzahrani similarity score, (3) the aggregate Word2Vec similarity score, (4) the cosine distance between the part of speech tag sets, (5) the longest common part of speech string, and (6) the longest contiguous common part of speech string. Those values were all represented in a matrix format with one pair of passages per row and one feature per column. Once this matrix was prepared, a small selection of classifiers hosted within Python’s &lt;a href=&quot;http://scikit-learn.org/stable/&quot;&gt;Scikit Learn&lt;/a&gt; library were chosen for comparison. Cross-classifier comparison is valuable, because different classifiers use very different logic to classify observations. The following plot from the Scikit Learn documentation shows that using a common set of input data (the first column below), the various classifiers in the given row classify that data rather differently:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_images/crosslingual_plagiarism_detection/classifier_comparison.png&quot; alt=&quot;Classifier Comparison&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to avoid prejudging the best classifier for the current task, half a dozen classifiers were selected and evaluated with hold one out tests. That is to say, for each observation in the training data, all other rows were used to train the given classifier, and the trained classifier was asked to predict whether the left-out observation was a plagiarism or not. Because this is a two class prediction task (each observation either is or is not an instance of plagiarism), the baseline success rate is 50%. Any performance below this baseline would be worse than random guessing. Happily, all of the classifiers achieved success rates that greatly exceeded this baseline value:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;centered&quot; src=&quot;/images/post_images/crosslingual_plagiarism_detection/classification_results.png&quot; alt=&quot;Classification Results&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Generally speaking, precision values were higher than recall, perhaps because some of the plagiarisms in the training data were fuzzier than others. Nevertheless, these accuracy values were high enough to warrant further exploration of Goldsmith’s writing. Using the array of features discussed above and others to be discussed in a subsequent post, I tracked down a significant number of plagiarisms that were not part of the training data, including the following outright translations from the Encyclopédie:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;French Source&lt;/th&gt;&lt;th&gt;Goldsmith Text&lt;/th&gt;&lt;/tr&gt;

  &lt;tr&gt;&lt;td&gt;Il n&#39;est point douteux que l&#39; Empire , composé d&#39;un grand nombre de membres très-puissans, ne dût être regardé comme un état très-respectable à toute l&#39;Europe, si tous ceux qui le composent concouroient au bien général de leur pays. Mais cet état est sujet à de très-grands inconvéniens: l&#39;autorité du chef n&#39;est point assez grande pour se faire écouter: la crainte, la défiance, la jalousie, regnent continuellement entre les membres: personne ne veut céder en rien à son voisin: les affaires les plus sérieuses les plus importantes pour tout le corps sont quelquefois négligées pour des disputes particulieres, de préséance, d&#39;étiquette, de droits imaginaires d&#39;autres minuties.&lt;/td&gt;&lt;td&gt;It is not to be doubted but that the empire, composed as it is of several very powerful states, must be considered as a combination that deserves great respect from the other powers of Europe, provided that all the members which compose it would concur in the common good of their country. But the state is subject to very great inconveniences; the authority of the head is not great enough to command obedience; fear, distrust, and jealousy reign continually among the members; none are willing to yield in the least to their neighbours; the most serious and the most important affairs with respect to the community, are often neglected for private disputes, for precedencies, and all the imaginary privileges of misplaced ambition.&lt;/td&gt;&lt;/tr&gt;  
  
  &lt;tr&gt;&lt;td&gt;L&#39; Eloquence , dit M. de Voltaire, est née avant les regles de la Rhétorique, comme les langues se sont formées avant la Grammaire.&lt;/td&gt;&lt;td&gt;Thus we see, eloquence is born with us before the rules of rhetoric, as languages have been formed before the rules of grammar.&lt;/td&gt;&lt;/tr&gt;
  
  &lt;tr&gt;&lt;td&gt;L&#39; empire Germanique, dans l&#39;état où il est aujourd&#39;hui, n&#39;est qu&#39;une portion des états qui étoient soûmis à Charlemagne. Ce prince possédoit la France par droit de succession; il avoit conquis par la force des armes tous les pays situés depuis le Danube jusqu&#39;à la mer Baltique; il y réunit le royaume de Lombardie, la ville de Rome son territoire, ainsi que l&#39;exarchat de Ravennes, qui étoient presque les seuls domaines qui restassent en Occident aux empereurs de Constantinople.&lt;/td&gt;&lt;td&gt;The empire of Germany, in its present state is only a part of those states that were once under the dominion of Charlemagne. This prince was possessed of France by right of succession: he had conquered by force of arms all the countries situated between the Baltic Sea and the Danube. He added to his empire the kingdom of Lombardy, the city of Rome and its territory, together with the exarchate of Ravenna, which were almost the only possessions that remained in the West to the emperors of Constantinople.&lt;/td&gt;&lt;/tr&gt;

  &lt;tr&gt;&lt;td&gt;Il n&#39;est point de genre de poésie qui n&#39;ait son caractere particulier; cette diversité, que les anciens  observerent si religieusement, est fondée sur la nature même des sujets imités par les poëtes. Plus leurs imitations sont vraies, mieux ils ont rendu les caracteres qu&#39;ils avoient à exprimer....Ainsi l&#39;églogue ne quitte pas ses chalumeaux pour entonner la trompette, l&#39; élégie n&#39;emprunte point les sublimes accords de la lyre.&lt;/td&gt;&lt;td&gt;There is no species of poetry that has not its particular character; and this diversity, which the ancients have so religiously observed, is founded in nature itself. The more just their imitations are found, the more perfectly are those characters distinguished. Thus the pastoral never quits his pipe, in order to sound the trumpet; nor does elegy venture to strike the lyre.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h4&gt;CONCLUSION&lt;/h4&gt;
&lt;p&gt;Samuel Johnson once observed that Oliver Goldsmith was “at no pains to fill his mind with knowledge. He transplanted it from one place to another; and it did not settle in his mind; so he could not tell what was his in his own books” (&lt;i&gt;Life of Johnson&lt;/i&gt;). Reading the borrowed passages above, one can perhaps understand why Goldsmith struggled to recall what he had written in his books–much of his writing was not really his. As scholars continue to advance the art of detecting textual reuse, we will be better equipped to map these borrowed words at larger and more ambitious scales. For the present, writers like Goldsmith offer plenty of data on which to hone those methods.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;* * *&lt;/div&gt;
&lt;p&gt;This work has benefitted enormously from conversations with a number of others. Antonis Anastasopoulos, David Chiang, Michael Clark, John Dillon, and Kenton Murray of Notre Dame’s Text Analysis Group, and Thom Bartold, Dan Hepp, and Jens Wessling of ProQuest offered key analytic insights, and Mark Olsen and Glenn Roe of the University of Chicago’s ARTFL group shared essential data. I am grateful for the generous help each of you has provided. Code is available &lt;a href=&quot;https://github.com/duhaime/detect_reuse&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Jul 2015 11:24:24 -0400</pubDate>
        <link>http://yourdomain.com/posts/crosslingual-plagiarism-detection</link>
        <guid isPermaLink="true">http://yourdomain.com/posts/crosslingual-plagiarism-detection</guid>
        
        
        <category>classification</category>
        
        <category>digital-humanities</category>
        
        <category>word-embeddings</category>
        
      </item>
    
      <item>
        <title>Mapping the Early English Book Trade</title>
        <description>&lt;!-- Load JQuery and Lightbox --&gt;
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/js/lightbox.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Historians often call attention to the tremendous influence the 1710 Act of Anne had on the early English book trade. Commonly identified as the origin of modern copyright law, the Act laid the statutory foundations for fixed-term copyright in England, extended the ability to hold such copyrights to all individuals, and eventually toppled the monopoly that London booksellers had held on English printing since the incorporation of the Stationers’ Company in 1557. Reading scholarship on this legal development over the last few months, I became curious to see how well the English Short Title Catalogue (&lt;a href=&quot;http://estc.bl.uk/F/?func=file&amp;amp;file_name=login-bl-estc&quot;&gt;ESTC&lt;/a&gt;) could substantiate some of the claims made in discussions of the Act. The ESTC seemed an ideal resource for this kind of analysis because, as Stephen Tabor has written, it represents “the fullest and most up-to-date bibliographical account of ‘English’ printing (in the broadest sense) for its first 328 years” (&lt;a href=&quot;http://muse.jhu.edu/journals/lbt/summary/v008/8.4tabor.html&quot;&gt;367&lt;/a&gt;). The database lists the authors, titles, imprint lines, publication dates, and many other metadata fields for each of the ~470,000 editions known to have been printed in England or its colonies between 1473 and 1800, and can therefore serve as a helpful resource with which to investigate the relationship between copyright law and literary history in the early modern period.&lt;/p&gt;

&lt;p&gt;One of the debates surrounding the Act of Anne concerns the degree to which the statute altered the geography of the English book trade. Prior to the passage of the Act, legal historian Diane Zimmerman notes, the Stationers’ Company dominated the book industry, and because the company’s printers were primarily stationed in London, the book trade was also centered in the metropole. With the passage of the Statute of Anne, however, authors could sell or trade their copyrights to printers outside of London: “Now any printer [or] bookseller, wherever located within the country, could register a copyright with the Company” and “since purchasers of the copies could be located anywhere in the United Kingdom, the Stationers’ Company did not regain its monopoly [on the book trade]” (7). Contra Zimmerman, William Patry argues that the Act of Anne failed to undermine London’s control of the book trade: “After the Statute of Anne, as before,” he writes, “the only purchasers of authors’ works were a small group of London booksellers” (&lt;a href=&quot;https://books.google.com/books?id=8-4catWPy84C&amp;amp;q=%22small+group+of+London+booksellers%22#v=snippet&amp;amp;q=%22small%20group%20of%20London%20booksellers%22&amp;amp;f=false&quot;&gt;84&lt;/a&gt;). To investigate what the ESTC had to say on this question, I compared the geographical distribution of English printers in the half centuries before and after the passage of the Act (click for full size):&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;img-link-wrapper&quot; href=&quot;/images/post_images/mapping_early_english_books/provincial_printing.png&quot; data-lightbox=&quot;provincial_printing&quot; data-title=&quot;&quot;&gt;
  &lt;img class=&quot;img-link&quot; src=&quot;/images/post_images/mapping_early_english_books/provincial_printing.png&quot; alt=&quot;Provincial Printing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The usual cautions concerning false imprints and varying survival rates notwithstanding, the ESTC clearly demonstrates the decentralization of English printing in the wake of the Act of Anne. London of course remained the primary site of publication throughout the years covered by the ESTC—publishing two-thirds of all records from the period—though its annual share in the trade fell quite dramatically across the eighteenth century:&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;centered img-link-wrapper&quot; href=&quot;/images/post_images/mapping_early_english_books/london_printing.png&quot; data-lightbox=&quot;london_printing&quot; data-title=&quot;&quot;&gt;
  &lt;img class=&quot;centered img-link&quot; src=&quot;/images/post_images/mapping_early_english_books/london_printing.png&quot; alt=&quot;London Printing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One can explain some of that decline by examining the growth of printing in major metropolitan areas outside of London, such as Edinburgh (responsible for 6.5% of total editions in the ESTC), Dublin (5.4%), and Boston (3.7%), which claimed the second, third, and fourth overall largest shares of the book trade according to the ESTC:&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;centered img-link-wrapper&quot; href=&quot;/images/post_images/mapping_early_english_books/publishing_beyond_london.png&quot; data-lightbox=&quot;publishing_beyond_london&quot; data-title=&quot;&quot;&gt;
  &lt;img class=&quot;centered img-link&quot; src=&quot;/images/post_images/mapping_early_english_books/publishing_beyond_london.png&quot; alt=&quot;Publishing Beyond London&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Among these figures, the explosion of printing in Edinburgh after 1750 is particularly interesting, and appears to be the result of further changes in the legal code. As John Feather notes, “The Copyright Act of 1710 (8 Anne c. 21) implied, but did not state, that it was illegal to import any English-language books into England and Wales if they had been previously printed there” (&lt;a href=&quot;/pdf/posts/mapping_early_books/feather_english_book_trade.pdf&quot;&gt;58&lt;/a&gt;). However, he continues, “the legislation in relation to Scotland seems to have lapsed in 1754-1755,” after which one observes tremendous growth in Scottish printing. Between 1750 and 1755, the five year average of Edinburgh printing as a percent of all printing recorded in the ESTC is 7.5%. This figure only continues to grow after the lapse of Scottish printing regulations noted by Feather: From 1755-1760, Edinburgh printing climbs to 9.0% of all printing for the five year period, from 1760-1765, the figure rises to 12.3%, and from 1765-1770, it reaches 14.4% of the ESTC totals for the five year range. These values are significant, because they suggest the real surge in the Scottish reprinting industry did not take place in the aftermath of the Donaldson v. Becket decision, as is commonly supposed, but rather with the lapse of Scottish reprinting regulations in 1755.&lt;/p&gt;

&lt;p&gt;Having plotted the changing geography of early English printing, I was curious to see whether the ESTC could shed new light on the debate concerning anonymous printing in the early modern period. Researchers like Jody Greene have argued that the Statute of Anne was in fact designed to help combat anonymous publishing insofar as it required authors to attach their names to works if they wished to obtain copyright protection for those works (&lt;a href=&quot;https://books.google.com/books?id=PFQchrtgYwcC&amp;amp;q=To+claim+responsibility+for+a+work+after+1710&amp;amp;hl=en#v=onepage&amp;amp;q=%22To%20claim%20responsibility%22&amp;amp;f=false&quot;&gt;4&lt;/a&gt;). Years ago, Michel Foucault pioneered a version of this thesis in his essay “&lt;a href=&quot;/pdf/posts/mapping_early_books/focault_what_is_an_author.pdf&quot;&gt;What is an Author?&lt;/a&gt;”, where he argued that the Act of Anne and its elaboration in eighteenth-century case law spurred the transition from a literary culture founded on anonymity to one founded on named authorship. More recently, however, Robert Griffin disputed such claims, arguing that “the historical record shows . . . there is no necessary relation between copyright and the appearance of the name of the author on the title page” (&lt;a href=&quot;https://muse.jhu.edu/journals/new_literary_history/v030/30.4griffin.html&quot;&gt;879&lt;/a&gt;). To map the changing rate of anonymity over time, I aggregated the number of anonymous and pseudonymous publications as percents of annual totals within the ESTC:&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;centered img-link-wrapper&quot; href=&quot;/images/post_images/mapping_early_english_books/anonymous_publishing.png&quot; data-lightbox=&quot;anonymous_publishing&quot; data-title=&quot;&quot;&gt;
  &lt;img class=&quot;centered img-link&quot; src=&quot;/images/post_images/mapping_early_english_books/anonymous_publishing.png&quot; alt=&quot;Anonymous Publishing&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The resulting plot shows great fluctuation in anonymous publications within the fifteenth and early sixteenth centuries, largely because of the tremendously small number of publications for those years. In 1492, for instance, the ESTC lists only 14 publications, all but two of which (S111337 and S120825) had identified authors, which results in an aggregate estimate of anonymity for the year of .142, or 14.2 percent. Despite the year to year fluctuations within early records, however, examining anonymity rates in the aggregate leads to legible patterns: one finds a marked decline in anonymous publication rates over the fifteenth and sixteenth centuries, a fairly steady rise across the seventeenth century, and a slow aggregate decline in the wake of the Act of Anne. This data supports some of the the findings of Joad Raymond—who examined a small sample of records from the period and found that “anonymity . . . became increasingly frequent” over the course of the seventeenth century (&lt;a href=&quot;https://books.google.com/books?id=DyMjW21HwHwC&amp;amp;q=168#v=onepage&amp;amp;q=%22Other%20changing%20tendencies%22&amp;amp;f=false&quot;&gt;168&lt;/a&gt;)—while challenging the popular thesis that anonymity thrived with the lapse of the Licensing Act in 1695.&lt;/p&gt;

&lt;p&gt;To plot the history of anonymity, though, is to beg a fundamental question: What exactly counts as an anonymous work? While the plot above treats works as anonymous only if their title pages are attributed to pseudonymous figures like “Isaac Bickerstaff” or to no author at all, there are other cases that one might well wish to classify as anonymous works. Consider the range of works attributed to “corporate” authors like the Royal Society of London or the English Parliament. Are works published by these entities anonymous publications? The way one answers this question will of course greatly affect the way one reads the history of anonymity. As a case in point, we could consult the following plot, which shows monarchical and parliamentary publishing during the seventeenth and eighteenth centuries:&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;centered img-link-wrapper&quot; href=&quot;/images/post_images/mapping_early_english_books/parliamentarian_printing.png&quot; data-lightbox=&quot;parliamentarian_printing&quot; data-title=&quot;&quot;&gt;
  &lt;img class=&quot;centered img-link&quot; src=&quot;/images/post_images/mapping_early_english_books/parliamentarian_printing.png&quot; alt=&quot;Parliamentarian Printing&quot; style=&quot;max-width:100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The points here represent yearly values, while the regression lines map the smoothed trends over time. For example, the release of the ESTC to which I had access indicates that James I and Charles I published a combined total of 82 works in 1625 (both served as monarch during the year), the English and Scottish Parliaments published a combined total of 4 works during the year, and the year’s total number of publications was 695, which means that monarchical publications account for 11.79 percent of the annual total while parliamentary publications account for only .5 percent  of the same. As one can see, treating the high volume of parliamentary publications from the period as “anonymous works” would create a serious spike in anonymity rates during the English Civil Wars, and would steadily inflate anonymity rates across the eighteenth century. On the other hand, refusing to include works of corporate authorship among anonymous publications (as I have done in the plot of anonymity above) makes it more difficult to answer the question: What exactly counts as anonymity in the early modern world? Whether one includes or excludes corporate authorship from the domain of anonymity, this plot of parliamentary and monarchical publications intrigues me because it maps so neatly onto the political history of the English Civil Wars: monarchical publications trump parliamentary output until the critical years of the early 1640’s, after which the Parliament assumes a predominance it holds throughout the Interregnum and only loses in the Restoration. Thereafter the monarchical voice triumphs until the Statute of Anne, after which point it rapidly loses ground. Examining this plot, I can’t help but wonder: To what extent is monarchical publishing a function of the crown’s political power, and to what extent is that political power a function of the monarch’s proximity to print?&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;* * *&lt;/div&gt;

&lt;p&gt;I want to thank Benjamin Pauley, Brian Geiger, and Virginia Schilling—each of whom kindly helped me to acquire the ESTC data on which the analysis above was performed—as well as Elliott Visconsi, whose intriguing questions on copyright history continue to motivate my ongoing research.&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Jan 2015 10:24:24 -0500</pubDate>
        <link>http://yourdomain.com/posts/mapping-the-early-english-book-trade</link>
        <guid isPermaLink="true">http://yourdomain.com/posts/mapping-the-early-english-book-trade</guid>
        
        
        <category>digital-humanities</category>
        
        <category>gis</category>
        
      </item>
    
  </channel>
</rss>
